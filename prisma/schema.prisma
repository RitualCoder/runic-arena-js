// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum Rarity {
  COMMON
  HOLOGRAPHIC
  V
  GOLD
}

enum CardType {
  FIRE
  WATER
  GRASS
  PSYCHIC
  NORMAL
  ELECTRIC
  FIGHTING
  DARK
  DRAGON
}

model Card {
  id     String @id @default(cuid())
  userId String

  title       String
  pv          Int
  description String
  rarity      Rarity
  type        CardType
  imageUrl    String

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  attacks Attack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Attack {
  id          String @id @default(cuid())
  name        String
  damage      Int
  cost        Int
  description String

  card   Card?   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}
